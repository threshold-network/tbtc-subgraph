enum DepositStatus {
    UNKNOWN
    REVEALED #-> bridge.revealDeposit() / DepositRevealed event
    MINTING_REQUESTED
    SWEPT # -> bridge.submitDepositSweepProof() / DepositSwept event && bank.increaseBalances() / BalanceIncreased event
    MINTING_FINALIZED
    CANCELED # -> Guardian cancel , The optimistic minting request for the given deposit exis or The optimistic minting request for the given deposit has not been finalized yet.
    REFUNDED
}

enum RedemptionStatus {
    UNKNOWN
    REQUESTED #-> bridge.requestRedemption() / RedemptionRequested event && bank.transferBalanceFrom() / BalanceTransferred event
    COMPLETED #-> bridge.submitRedemptionProof() / RedemptionCompleted event && bank.DecreaseBalance() / BalanceDecreased event && bank.trasferBalance() / BalanceTransferred event
    TIMEDOUT #-> bridge.notifyRedemptionTimeout() / RedemptionTimedOut
    VETOED #-> redemptionWatchTower.raiseObjection()
}

type _Schema_
@fulltext(
    name: "searchRedemption"
    language: en
    algorithm: rank
    include: [{ entity: "Redemption", fields: [{ name: "id" }] }]
)

type Transaction @entity {
    id: ID!
    txHash: Bytes!
    timestamp: BigInt!
    from: Bytes!
    to: Bytes
    amount: BigInt
    description: String
    deposits: [Deposit!] @derivedFrom(field: "transactions")
    redemptions: [Redemption!] @derivedFrom(field: "transactions")
}

type User @entity {
    id: Bytes!
    mintingDebt: BigInt!
    tokenBalance: BigInt!
    totalTokensHeld: BigInt!
    tbtcToken: TBTCToken!
    deposits: [Deposit!]!
    redemptions: [Redemption!]!
    isRedeemerBanned: Boolean!
}

type Deposit @entity {
    #keccak256(fundingTxHash|fundingOutputIndex)
    id: Bytes!
    status: DepositStatus
    user: User!
    amount: BigInt!
    newDebt: BigInt!
    actualAmountReceived: BigInt!
    treasuryFee: BigInt!
    walletPubKeyHash: Bytes
    fundingTxHash: Bytes
    fundingOutputIndex: BigInt
    blindingFactor: Bytes
    refundPubKeyHash: Bytes
    refundLocktime: Bytes
    vault: Bytes
    transactions: [Transaction!]!
    sweptAt: BigInt
    depositTimestamp: BigInt
    updateTimestamp: BigInt
}

type Redemption @entity {
    #keccak256(keccak256(redeemerOutputScript) | walletPubKeyHash) + "-" + count
    id: ID!
    status: RedemptionStatus
    user: User!
    amount: BigInt!
    walletPubKeyHash: Bytes
    redeemerOutputScript: Bytes
    redemptionTxHash: Bytes
    treasuryFee: BigInt
    txMaxFee: BigInt
    completedTxHash: Bytes
    transactions: [Transaction!]!
    redemptionTimestamp: BigInt
    updateTimestamp: BigInt!
}


type TBTCToken @entity{
    "TBTCToken"
    id: ID!
    name: String!
    symbol: String!
    decimals: Int!
    address: Bytes!
    totalSupply: BigInt!
    totalMint: BigInt!
    totalBurn: BigInt!
    currentTokenHolders: BigInt!
    holders: [User!] @derivedFrom(field: "tbtcToken")
}

enum TransactionEvent {
    STAKED,
    TOPUP,
    UNSTAKE,
    AUTHORIZED_RANDOM_BEACON,
    AUTHORIZED_TBTC,
    AUTHORIZED_UNKNOW,
    DECREASE_AUTHORIZED_RANDOM_BEACON,
    DECREASE_AUTHORIZED_TBTC,
    REGISTERED_OPERATOR,
    BOND_OPERATOR,
    JOINED_SORTITION_POOL,
    SLASHED,
    WITHDRAW_REWARD
}

type Event @entity {
    #Hash of transaction
    id: ID!
    txHash: Bytes!
    timestamp: BigInt!
    from: Bytes!
    to: Bytes
    amount: BigInt!
    isRandomBeaconEvent: Boolean!
    event: TransactionEvent!
    operator: [Operator!] @derivedFrom(field: "events")
}

type GroupPublicKey @entity {
    # Group id
    id: ID!
    # Group public key
    pubKey: Bytes!
    group : RandomBeaconGroup!

}

type RandomBeaconGroup @entity {
    id: ID!
    createdAt: BigInt!
    createdAtBlock: BigInt!

    groupPublicKey: GroupPublicKey! @derivedFrom(field: "group")
    memberships: [RandomBeaconGroupMembership!]! @derivedFrom(field: "group")

    "The total number of slots."
    size: Int!
    uniqueMemberCount: Int!
    "Total fault."
    misbehavedCount: Int!
    totalSlashedAmount: BigInt!
    terminated: Boolean!

    nonce: BigInt!
    notifier : Bytes

    "Create from WalletRegistry"
    isWalletRegistry: Boolean!

    relayEntries: [RelayEntry!]! @derivedFrom(field: "group")
}

"""
Represents the membership of an operator in a beacon group.
"""
type RandomBeaconGroupMembership @entity {
    #keccak256(group id , operator address)
    id: ID!
    group: RandomBeaconGroup!
    operator: Operator!

    seats: [Int!]!
    "The same operator can fill multiple membership slots within a group."
    count: Int!

    # These are denormalized fields from the group & operator, to allow sorting memberships by these fields.
    groupCreatedAt: BigInt!
}

type RelayEntry @entity {
    "Request Id"
    id: ID!
    requestedAt: BigInt!
    requestedBy: Bytes!
    group: RandomBeaconGroup!

    value: Bytes
    submitter: Bytes!
    submittedAt: BigInt
    isInProgress: Boolean!
}

type Operator @entity {
    #Staking Provider address
    id: ID!
    #Operator address
    address: Bytes!
    registeredOperatorAddress: Int!

    "registered operator address use PreApplication"
    isBondRegisteredOperatorAddress: Boolean!
    "When this operator had a stake delegated to them. This is like a createdAt, and the operation also assigns the beneficiary/authorizer roles."
    stakedAt: BigInt!
    stakeType: Int!

    randomBeaconGroupMemberships: [RandomBeaconGroupMembership!]! @derivedFrom(field: "operator")

    # The other "staker" roles.
    owner: Bytes
    beneficiary: Bytes
    authorizer: Bytes

    # Authorizations
    randomBeaconAuthorized: Boolean!
    tBTCAuthorized: Boolean!

    # Statistics
    tBTCAuthorizedAmount: BigInt!
    randomBeaconAuthorizedAmount: BigInt!
    stakedAmount: BigInt!

    "Total reward withdrew"
    rewardDispensed : BigInt!
    "The reward available to withdraw."
    availableReward: BigInt!


    "How often this operator was involved in a fault."
    misbehavedCount: Int!
    totalSlashedAmount: BigInt!

    "Duration of the sortition pool rewards ban imposed on operators  who misbehaved"
    poolRewardBanDuration: BigInt!

    beaconGroupCount: Int!
    events: [Event!]!
}

enum State {
    "Group creation is not in progress. It is a state set after group creation completion either by timeout or by a result approval."
    IDLE,
    "Group creation is awaiting the seed and sortition pool is locked."
    AWAITING_SEED,
    "Off-chain DKG protocol execution is in progress. A result is being calculated by the clients in this state. It's not yet possible to submit the result."
    KEY_GENERATION,
    """ After off-chain DKG protocol execution the contract awaits result submission.
    This is a state to which group creation returns in case of a result
    challenge notification."""
    AWAITING_RESULT,
    """DKG result was submitted and awaits an approval or a challenge. If a result
    gets challenge the state returns to `AWAITING_RESULT`. If a result gets
    approval the state changes to `IDLE`."""
    CHALLENGE
}

"""
Exposes some global system statistics. Only a single record with the id "current" is available.
"""
type StatsRecord @entity {
    id: ID!

    "The total number of stakers with a stake larger than 0."
    numOperators: Int!
    numDeposits: Int!
    numRedemptions: Int!
    numOperatorsRegisteredNode: Int!

    totalTBTCAuthorizedAmount: BigInt!
    totalRandomBeaconAuthorizedAmount: BigInt!
    totalStaked: BigInt!

    "True is not pause"
    mintingStatus: Boolean!
}
"""
Exposes some global system status data. Only a single record with the id "status" is available.
"""
type StatusRecord @entity {
    id: ID!

    "The currently requested RandomBeacon relay entry, if any. Only a single request can exist at a time."
    groupState: State!
    ecdsaState: State!
    challenger: Bytes
    reason: String

    pendingRedemptions: [Bytes!]!
    lastMintedInfo: [String!]!
    lastMintedHash: Bytes!
}